get:
  tags:
    - Cart
  summary: Returns the customer's shopping cart
  description: Returns the shopping cart for a specific customer
  operationId: getCartByCustomerID
  parameters:
    - $ref: '../components/parameters/PathCustomerID.yaml'
  responses:
    200:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: '../components/schemas/Cart.yaml#/CartResponse'
    403:
      $ref: '../components/responses/ForbiddenError.yaml'
    404:
      description: The specified customer ID does not exist
      $ref: '../components/responses/NotFoundError.yaml'

put:
  tags:
    - Cart
  summary: Update the customer's shopping cart currency
  description: Update the currency applied to the customer's shopping cart. Default's currency is EUR.
  operationId: updateCartCurrencyByCustomerID
  parameters:
    - $ref: '../components/parameters/PathCustomerID.yaml'
  requestBody:
    content:
      application/json:
        schema:
          $ref: '../components/schemas/Cart.yaml#/CartUpdateRequest'
  responses:
    200:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: '../components/schemas/Cart.yaml#/CartResponse'
    403:
      $ref: '../components/responses/ForbiddenError.yaml'
    404:
      description: The specified customer ID does not exist
      $ref: '../components/responses/NotFoundError.yaml'

delete:
  tags:
    - Cart
  summary: Delete the customer's shopping cart
  description: Deletes the shopping cart for a specific customer
  operationId: deleteCartByCustomerID
  parameters:
    - $ref: '../components/parameters/PathCustomerID.yaml'
  responses:
    204:
      description: No content
    403:
      $ref: '../components/responses/ForbiddenError.yaml'
    404:
      description: The specified customer ID does not exist
      $ref: '../components/responses/NotFoundError.yaml'