openapi: 3.1.0
info:
  version: 1.0.0
  title: LEXAILEC online shopping store - OpenAPI specification
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  description: |
    # Introduction
    This API definition is a good starting point, If you're aiming to use the API provided by the shopping store.
servers:
  - url: https://lexailec.com/api/v1
security:
  - bearerAuth: []
tags:
  - name: Cart
    description: Operations about shopping carts.
  - name: User
    description: Operations about customers.
  - name: Order
    description: Operations about orders.
paths:
  /carts/{customerID}:
    get:
      tags:
        - Cart
      summary: Returns the customer's shopping cart
      description: Returns the shopping cart for a specific customer
      operationId: getCartByCustomerID
      parameters:
        - $ref: '#/components/parameters/CustomerID'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '404':
          description: The specified customer ID does not exist
          $ref: '#/components/responses/NotFoundError'
    delete:
      tags:
        - Cart
      summary: Delete the customer's shopping cart
      description: Deletes the shopping cart for a specific customer
      operationId: deleteCartByCustomerID
      parameters:
        - $ref: '#/components/parameters/CustomerID'
      responses:
        '204':
          description: No content
        '404':
          description: The specified customer ID does not exist
          $ref: '#/components/responses/NotFoundError'
  /carts/{customerID}/products:
    get:
      tags:
        - Cart
      summary: Returns the list of products in the customer's shopping cart
      description: Returns the list of products in the customer's shopping cart
      operationId: getCartProductsByCustomerID
      parameters:
        - $ref: '#/components/parameters/CustomerID'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '404':
          description: The specified customer ID does not exist
          $ref: '#/components/responses/NotFoundError'
    post:
      parameters:
        - $ref: '#/components/parameters/CustomerID'
      tags:
        - Cart
      summary: Adds products to the customer's shopping cart
      description: Adds products to cart if it doesn't exist, or increases quantity by specified number of products if it does
      operationId: addCartProductsByCustomerID
      requestBody:
        description: List of products
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Products added successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '404':
          description: The specified customer ID does not exist
          $ref: '#/components/responses/NotFoundError'
    put:
      tags:
        - Cart
      summary: Replace products in the customer's shopping cart
      description: Replace products in the customer's shopping cart
      operationId: replaceProductsByCustomerID
      parameters:
        - $ref: '#/components/parameters/CustomerID'
      requestBody:
        description: List of products
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Products replaced successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '404':
          description: The specified customer ID does not exist
          $ref: '#/components/responses/NotFoundError'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JSON Web Token (JWT) based authentication
  parameters:
    CustomerID:
      name: customerID
      in: path
      description: Customer's identifier
      required: true
      schema:
        type: integer
        format: int64
  schemas:
    ID:
      type: object
      properties:
        id:
          type: integer
          format: int64
    Product:
      description: Product in shopping cart
      type: object
      properties:
        id:
          description: ID of the product
          $ref: '#/components/schemas/ID'
        quantity:
          description: The product's quantity
          type: integer
          format: int32
          minimum: 1
        unit_price:
          description: The product's price per unit
          type: number
          format: double
    Cart:
      description: Customer's shopping cart
      type: object
      properties:
        customer_id:
          description: ID of the customer who owns the cart
          $ref: '#/components/schemas/ID'
        products:
          description: Collection of products in cart.
          type: array
          items:
            $ref: '#/components/schemas/Product'
    Error:
      required:
        - status
        - title
        - detail
      type: object
      properties:
        status:
          type: integer
        title:
          type: string
        detail:
          type: string
  responses:
    NotFoundError:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            status: 404
            title: Not Found
            detail: Resource not found
x-tagGroups:
  - name: API
    tags:
      - User
      - Cart
      - Order
